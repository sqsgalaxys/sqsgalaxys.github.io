{"meta":{"title":"sqsgalaxys'Blog","subtitle":"不以物喜，不以己悲....","description":"Note","author":"sqsgalaxys","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2015-11-30T18:53:52.000Z","updated":"2016-04-09T05:52:07.238Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"About Me：Gackt camui ​"},{"title":"categorires","date":"2016-04-09T06:28:14.000Z","updated":"2016-04-09T06:29:38.716Z","comments":true,"path":"categorires/index.html","permalink":"http://yoursite.com/categorires/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-04-09T06:28:29.000Z","updated":"2016-04-09T06:28:29.604Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java Reflect","slug":"Java-Reflect","date":"2016-08-09T04:38:42.000Z","updated":"2016-08-10T00:19:18.948Z","comments":true,"path":"2016/08/09/Java-Reflect/","link":"","permalink":"http://yoursite.com/2016/08/09/Java-Reflect/","excerpt":"","text":"Class.forName() 创建两个类:狗类、猫类继承父类动物接口,并实现其叫喊方法. 创建一个测试类,通过传入不同动物的名称输出其叫声.比如狗就是汪汪,猫就是喵喵. 定义动物借口12345package com.sqsgalaxys.testReflect;public interface Animal &#123; public void scream();&#125; 定义猫类12345678910package com.sqsgalaxys.testReflect;public class Cat implements Animal &#123; @Override public void scream() &#123; System.out.println(\"miao,miao\"); &#125;&#125; 定义狗类12345678910package com.sqsgalaxys.testReflect;public class Dog implements Animal &#123; @Override public void scream() &#123; System.out.println(\"wang,wang\"); &#125;&#125; 不使用反射的写法的测试类1234567891011121314151617181920212223242526272829package com.sqsgalaxys.testReflect;public class AnimalTest &#123; Animal animal = null; public void makeNoise(String flag) &#123; if (\"狗\".equals(flag)) &#123; animal = new Dog(); animal.scream(); &#125; else if (\"猫\".equals(flag)) &#123; animal = new Cat(); animal.scream(); &#125; else if (\"羊\".equals(flag)) &#123; // animal = new Sheep(); // animal.scream(); &#125; // else if ..... else &#123; System.out.println(\"没有发现任何动物\"); &#125; &#125; public static void main(String[] args) &#123; AnimalTest at = new AnimalTest(); // 输出猫的叫声 at.makeNoise(\"猫\"); &#125;&#125; 使用反射的写法的测试类12345678910111213141516171819202122package com.sqsgalaxys.testReflect;public class AnimalTestEx &#123; Animal animal = null; public void makeNoise(String animalName) &#123; try &#123; animal = (Animal) Class.forName(animalName).newInstance(); &#125; catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) &#123; e.printStackTrace(); &#125; animal.scream(); &#125; public static void main(String[] args) &#123; AnimalTestEx at = new AnimalTestEx(); at.makeNoise(\"com.sqsgalaxys.testReflect.Cat\"); &#125;&#125; Class.forName() newInstance() getDeclaredMethod()invoke() getDeclaredField() setAccessible()....待反射获取的类Student1234567891011121314151617181920212223package com.sqsgalaxys.testReflectEx;public class Student &#123; private int age; private String name; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public static void hi(int age,String name)&#123; System.out.println(\"大家好，我叫\"+name+\"，今年\"+age+\"岁\"); &#125; &#125; 测试类Test123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778package com.sqsgalaxys.testReflectEx;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class Test &#123; @SuppressWarnings(&#123; \"unchecked\", \"unused\" &#125;) public static void main(String[] args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException, SecurityException, NoSuchFieldException &#123; // 反射使用的三个步骤: // 1. 得到要调用类的 class // 2. 得到要调用的类中的方法 // 3. 方法调用 (invoke) // JAVA反射的常规使用步骤 Class&lt;?&gt; cls = Class.forName(\"com.sqsgalaxys.testReflectEx.Student\"); Method m = cls.getDeclaredMethod(\"hi\", new Class[] &#123; int.class, String.class &#125;); m.invoke(cls.newInstance(), 21, \"test\"); // 方法调用中的参数类型 // 正确调用 // Method setMethod = cls.getDeclaredMethod(\"setAge\", Integer.class); // setMethod.invoke(cls.newInstance(), 15); // 不正确调用 // Method setMethod = cls.getDeclaredMethod(\"setAge\", int.class); // setMethod.invoke(cls.newInstance(), 15); // 异常信息 // Exception in thread \"main\" java.lang.NoSuchMethodException: // com.sqsgalaxys.testReflectEx.Student.setAge(int) // at java.lang.Class.getDeclaredMethod(Unknown Source) // at com.sqsgalaxys.testReflectEx.Test.main(Test.java:**) // 参数类型要一致 // static方法的反射调用 // static方法调用时，不必得到对象实例 // Method staticMethod = cls.getDeclaredMethod(\"hi\", int.class, // String.class); // staticMethod.invoke(cls, 20, \"test\"); // staticMethod.invoke(cls.newInstance(), 21, \"test\"); // private 的成员变量赋值 // 直接赋值 // Object student = cls.newInstance();// 得到一个实例 // Field field = cls.getDeclaredField(\"age\"); // field.set(student, 10); // System.out.println(field.get(student)); // 异常信息 // Exception in thread \"main\" java.lang.IllegalAccessException: Class // com.sqsgalaxys.testReflectEx.Test can not access a member of class // com.sqsgalaxys.testReflectEx.Student with modifiers \"private\" // at sun.reflect.Reflection.ensureMemberAccess(Unknown Source) // at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(Unknown // Source) // at java.lang.reflect.AccessibleObject.checkAccess(Unknown Source) // at java.lang.reflect.Field.set(Unknown Source) // at com.sqsgalaxys.testReflectEx.Test.main(Test.java:47) // private 的成员变量赋值 // 解决方法1 setAccessible() // Object student = cls.newInstance(); // Field field = cls.getDeclaredField(\"age\"); // field.setAccessible(true);//设置允许访问 // field.set(student, 10); // System.out.println(field.get(student)); // private 的成员变量赋值 // 解决方法2 // Object student = cls.newInstance(); // Method setMethod = cls.getDeclaredMethod(\"setAge\", Integer.class); // setMethod.invoke(student, 15);// 调用set方法 // Method getMethod = cls.getDeclaredMethod(\"getAge\"); // System.out.println(getMethod.invoke(student)); &#125;&#125; 参考: 十八、Java从头开始- Java反射的使用 - ranji13 - ITeye技术网站 JAVA反射使用手记 - hbcui1984的专栏 - 博客频道 - CSDN.NET","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Use Git","slug":"Use-Git","date":"2016-08-08T11:45:21.000Z","updated":"2016-08-10T00:22:04.924Z","comments":true,"path":"2016/08/08/Use-Git/","link":"","permalink":"http://yoursite.com/2016/08/08/Use-Git/","excerpt":"版本控制系统 Subversion CVS Perforce snapshotDelta Storage systems","text":"版本控制系统 Subversion CVS Perforce snapshotDelta Storage systems git 命令// 设置用户名git config --global user.name &quot;name name&quot;// 设置用户邮箱git config --global user.email &quot;test@test.test&quot;// 显示 git 的全局设置git config --list// 设置 别名git config --global alias.st status// 使 git 忽略空白的变化git config --global apply.whitespace nowarn// 使 git 输出时加上颜色git config --global color.ui true// 编辑 git 全局配置文件vi C:\\Users\\Administrator\\.gitconfig// 初始化一个 git 仓库git init// 从远程仓库下载一个仓库,并放置到 test 文件夹git clone https://****@github.com/****/****.git test// 检查 git 仓库的状态git status// 把 Untracked files(未被追踪的文件)添加到追踪列表git add filename// 添加所有 Untracked filesgit add .// 互动模式git add -i// 提交git commit// 无提交窗口的提交git commit -m &quot;message&quot;// 强制提交当前目录下的所有内容git commit -a// 强制提交当前目录下的所有内容,并直接添加提交信息git commit -am &quot;message&quot;// 显示变更记录git commit -v// 查看 commit 记录git log// 查看 commit 记录详细信息git log --stat// 查看 commit 记录更详细信息git log -p// 查看 对象git cat-file -p ******(个数?)// 查看仓库里未暂存内容和已提交内容的差异git diff// 查看暂存区(staging area)里的内容git ls-files --stage// 把文件从暂存区移除git rm-cached filename// 把修改撤销git checkout -- filename// 查看当前的提交(HEAD)所包含的 blob 对象git cat-file -p HEAD | head -n 1 | cut -b6-15 | xargs git cat-file -p// 查看之前的的提交(HEAD^)所包含的 blob 对象git cat-file -p HEAD^ | head -n 1 | cut -b6-15 | xargs git cat-file -p // 把一个存在的仓库推送到 githubgit remote add origin https://github.com/****/****.gitgit push -u origin master fatal: remote origin already exists. git remote rm origingit remote add origin git@github.com:sqsgalaxys/Test-git.git terminal - Github “fatal: remote origin already exists” - Stack Overflow // 编辑 git 忽略列表vi .gitignore git 目录结构// 旧版使用的文件夹,新版git一般不会出现branches\\ // 下面这个目录灰常重要,里面存储 git 的数据对象 提交(commits) 树对象(trees) 二进制对象(blobs) 标签对象(tags)objects\\ // 各个 refs 的历史信息logs\\ // 里面有一个 exclude 文件,指定本项目要忽略的文件info\\ // 默认的 “hooks” 脚本文件hooks\\ // 表示这你的每个分支指向哪个提交 (commit)refs\\ // 保存着上一次提交时的注释信息COMMIT_EDITMSG // 索引文件,git add 后把要添加的项暂存到这里index // 项目的配置信息config // 项目当前在哪个分支的信息HEAD // 项目的描述信息description 传输协议git://http://https:// ssh,ftp(s),rsync 等协议 目录工作目录 一个 git 项目中文件的状态 未被跟踪的文件(untracked file) 已被跟踪的文件(tracked file) a. 被修改但未被暂存的文件(changed but not updated或 modified) b. 已暂存可以被提交的文件(changes to be committed或 staged) c. 自上次提交以来,未被修改的文件(clean 或 unmodified)跟踪 tracked修改 modified暂存 staged提交 committed 参考: Git 教學(1) : Git 的基本使用 - 好麻煩部落格 Git历险记（一） Git历险记（二）——Git的安装和配置 Git 历险记（三）——创建一个自己的本地仓库 Git历险记（四）——索引与提交的幕后故事 Git历险记（五）——Git里的分支＆合并 进阶: git 配置 Git Book 中文版 - 定制Git git-config(1) Git-Smart-HTTP-Transport(git 对http(s)传输协议的优化) 使用 Git强制从远程仓库获取代码覆盖本地强制用本地代码覆盖远程仓库一些常用的操作revertUntracked filesvi C:\\Users\\Administrator\\.githubcredSHA 签名串值HEAD 当前提交HEAD^ 前一次提交","categories":[],"tags":[{"name":"Use","slug":"Use","permalink":"http://yoursite.com/tags/Use/"},{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Use CMD","slug":"Use-CMD","date":"2016-08-08T09:48:56.000Z","updated":"2016-08-10T00:19:18.757Z","comments":true,"path":"2016/08/08/Use-CMD/","link":"","permalink":"http://yoursite.com/2016/08/08/Use-CMD/","excerpt":"使用 CMD使用 CMD 查看端口占用情况并结束占用的程序查看所有的端口占用情况netstat -an0查看指定端口的占用情况netstat -an0|findstr &quot;4000&quot;","text":"使用 CMD使用 CMD 查看端口占用情况并结束占用的程序查看所有的端口占用情况netstat -an0查看指定端口的占用情况netstat -an0|findstr &quot;4000&quot;查看PID对应的进程tasklist|findstr &quot;1234&quot;结束进程taskkill /f /t /im ***.exe 参考： windows 如何查看端口占用情况? - Windows - language - ITeye论坛 tasklist 命令 Tasklist","categories":[],"tags":[{"name":"Use","slug":"Use","permalink":"http://yoursite.com/tags/Use/"},{"name":"CMD","slug":"CMD","permalink":"http://yoursite.com/tags/CMD/"}]},{"title":"Use Chrome","slug":"Use-Chrome","date":"2016-08-08T09:02:17.000Z","updated":"2016-08-10T00:19:18.904Z","comments":true,"path":"2016/08/08/Use-Chrome/","link":"","permalink":"http://yoursite.com/2016/08/08/Use-Chrome/","excerpt":"","text":"copy 2 clipboard with ease - Chrome 网上应用店[title](url &quot;&quot;)LastPass: Free Password Manager - Chrome 网上应用店Vim Tips - New Tab Replacement - Chrome 网上应用店OneTab - Chrome 网上应用店Vimium - Chrome 网上应用店","categories":[],"tags":[{"name":"Use","slug":"Use","permalink":"http://yoursite.com/tags/Use/"},{"name":"Chrome","slug":"Chrome","permalink":"http://yoursite.com/tags/Chrome/"}]},{"title":"The day","slug":"The-Day","date":"2016-08-08T02:46:32.000Z","updated":"2016-08-10T00:19:18.577Z","comments":true,"path":"2016/08/08/The-Day/","link":"","permalink":"http://yoursite.com/2016/08/08/The-Day/","excerpt":"生日快乐～～","text":"生日快乐～～","categories":[],"tags":[]},{"title":"Use Linux","slug":"Use-Linux","date":"2016-08-08T01:49:17.000Z","updated":"2016-08-10T00:19:18.724Z","comments":true,"path":"2016/08/08/Use-Linux/","link":"","permalink":"http://yoursite.com/2016/08/08/Use-Linux/","excerpt":"Linux 启动设置: sudo vi /etc/inittab","text":"Linux 启动设置: sudo vi /etc/inittab 123456789101112# Default runlevel. The runlevels used are:# 0 - halt (Do NOT set initdefault to this)# 1 - Single user mode# 2 - Multiuser, without NFS (The same as 3, if you do not have networking)# 3 - Full multiuser mode# 4 - unused# 5 - X11# 6 - reboot (Do NOT set initdefault to this)##id:3:initdefault:#id:5:initdefault: Linux启动界面切换:图形界面-字符界面(转) - 草原和大树 - 博客园重启命令sudo reboot关机sudo poweroffcommand line - How do I shut down or reboot from a terminal? - Ask Ubuntu echo 命令echo -n od 命令","categories":[],"tags":[{"name":"Use","slug":"Use","permalink":"http://yoursite.com/tags/Use/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Use Java","slug":"Use-Java","date":"2016-08-07T08:03:27.000Z","updated":"2016-08-10T00:19:18.823Z","comments":true,"path":"2016/08/07/Use-Java/","link":"","permalink":"http://yoursite.com/2016/08/07/Use-Java/","excerpt":"‘javac’ 不是内部或外部命令，也不是可运行的程序或批处理文件。","text":"‘javac’ 不是内部或外部命令，也不是可运行的程序或批处理文件。","categories":[{"name":"编程","slug":"programming","permalink":"http://yoursite.com/categories/programming/"}],"tags":[{"name":"Use","slug":"Use","permalink":"http://yoursite.com/tags/Use/"},{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Use-Vim","slug":"Use-Vim","date":"2016-08-06T11:59:45.000Z","updated":"2016-08-10T00:19:07.654Z","comments":true,"path":"2016/08/06/Use-Vim/","link":"","permalink":"http://yoursite.com/2016/08/06/Use-Vim/","excerpt":"vim 使用 删除文件中所有的空行 ::g/^$/d","text":"vim 使用 删除文件中所有的空行 ::g/^$/d 如何在vim中删除空行-Shell-ChinaUnix.net 整行移动 : 移动到下一行开头+ 移动到上一行开头- 移动到行首0 移动到行尾$ 符号 . : 重复命令 当前行.-1 代表当前行的上一行 MiniBufExplorerMiniBufExplorer 是什麽？MiniBufExplorer 安装MiniBufExplorer 使用 参考： fholgado/minibufexpl.vim: Elegant buffer explorer - takes very little screen space 快速浏览和操作Buffer – 插件: MiniBufExplorer buffer 的使用: 下一个 buffer:bn 上一个 buffer:bp 打开名称为 filename 的文件:e&lt;filename&gt; 显示当前打开的 buffer:ls n 为数字，打开第 n 个buffer:b&lt;n&gt; 自动补全:b&lt;tab&gt; 删除 buffer:bd 进制操作: 正常打开文件，默认添加一个换行行vim filename 以二进制打开文件vim -b filename 进入 16 进制查看编辑模式,如果在这个模式下执行 :wq 命令会把文件直接保存成这个界面(会把当前界面都保存成字符):%xxd 修改 16 进制内容后 回到普通模式，可以看到修改产生的变化，这时执行 :wq 不会保存到 16 进制的模式:%xxd -r 12345678910111213eg:(Linux 下操作)echo -n \"test\" &gt; test.bincat test.binvim -b test.bin:%!xxdvim test.bin:%!xxd0x0avim -b test.bin:%!xxd// 修改 :%!xxd -r:wq 参考:在Linux下使用vim配合xxd查看并编辑二进制文件 - killkill - 博客园linux下用vim实现ultraEdit的功能 - Jason Damon - 博客园 :q1 = :q! Vim 帮助文件的跳转 Jump to a subject:Position the cursor on a tag (e.g. |bars|) and hit CTRL-]. With the mouse:“:set mouse=a” to enable the mouse (in xterm or GUI). Double-click the left mouse button on a tag, e.g. |bars|. Jump back:Type CTRL-T or CTRL-O (repeat to go further back). Vim 使用:find命令打开文件使用：搜索打开文件 filename：1:find filename 提示：使用前需要配置path变量,添加以下语句到 .vimrc文件以可以搜索打开以下文件夹中的文件:D:\\OneDrive\\VIMD:\\Proram Files (x86)\\hexo\\source\\_posts123:set path+=.,D:\\OneDrive\\VIM/*# 对包含空格文件夹的特殊处理：:set path+=.,D:\\Proram\\\\\\ Files\\\\\\ (x86)\\hexo\\source\\_posts 参考: 《Vim 实用技巧》技巧42 使用:find命令打开文件 使用vim的find命令快速打开文件 - 王鸿飞的专栏 - 博客频道 - CSDN.NET 官方文档 :help path Vim 重复上一个Ex命令：@： 参考： 《Vim 实用技巧》技巧31 重复上次的 Ex 命令 宏// Vim 重复上一个宏命令：@@// 开始录制宏q{register}// 停止录制宏q// 查看寄存器中的宏:reg a 参考： 《Vim 实用技巧》技巧64 宏的读取与执行","categories":[],"tags":[{"name":"Use","slug":"Use","permalink":"http://yoursite.com/tags/Use/"},{"name":"Vim","slug":"Vim","permalink":"http://yoursite.com/tags/Vim/"}]},{"title":"Use Hexo","slug":"Use-Hexo","date":"2016-08-05T10:12:39.000Z","updated":"2016-08-10T00:35:22.826Z","comments":true,"path":"2016/08/05/Use-Hexo/","link":"","permalink":"http://yoursite.com/2016/08/05/Use-Hexo/","excerpt":"commands hexo d hexo g hexo clean hexo n “tit le” hexo s","text":"commands hexo d hexo g hexo clean hexo n “tit le” hexo s 预览地址 hexo v hexo: 3.2.2 hexo-cli: 1.0.2 os: Windows_NT 10.0.14393 win32 x64 http_parser: 2.6.0 node: 5.1.0 v8: 4.6.85.31 uv: 1.7.5 zlib: 1.2.8 ares: 1.10.1-DEV icu: 56.1 modules: 47 openssl: 1.0.2d hexo clean &amp;&amp; hexo shexo clean &amp;&amp; hexo d markdown代码块1这里是代码块 Markdown代码块中的Markdown语法 · Issue #587 · hexojs/hexo 图片显示123![“图片描述”（可以不写）](“图片地址”)![0808](http://obkpw0khh.bkt.clouddn.com/2016-08-08.png) hexo 对一篇文章添加多个标签tags: [aaa, bbb]123tags:- foo- bar 请问如何对一篇文章增加多个标签，应该使用什么分隔符？ · Issue #351 · hexojs/hexo Hexo 中 tag，categories 的使用 参考:- Hexo使用攻略：（四）Hexo的分类和标签设置 | { GoonX }Link 指令 | Hexo Hexo 最常用的几个命令 | MOxFIVE’s Blog 使用主题 hexo-theme-icarus// 安装主题git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus// _config.ymltheme: icarus// 更新主题 12$ cd themes/icarus$ git pull // 安装搜索插件$ npm install -S hexo-generator-json-content// 启用搜索insight: true 参考: Installation · ppoffice/hexo-theme-icarus Wiki ppoffice/hexo-theme-icarus: The blog theme you may fall in love with, coming to Hexo. Icarus Icarus - Wikipedia, the free encyclopedia 伊卡洛斯 - 维基百科，自由的百科全书 Icarus - Google Search 使用文章摘要&lt;!-- more --&gt; 参考: 不知道怎么回事，进入主页文章列表显示全部，而不是显示一部分摘要和more · Issue #44 · litten/hexo-theme-yilia","categories":[],"tags":[{"name":"Use","slug":"Use","permalink":"http://yoursite.com/tags/Use/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"Use WireShark","slug":"Use-WireShark","date":"2016-08-05T10:02:21.000Z","updated":"2016-08-10T00:19:18.776Z","comments":true,"path":"2016/08/05/Use-WireShark/","link":"","permalink":"http://yoursite.com/2016/08/05/Use-WireShark/","excerpt":"Wireshark 过滤规则显示http状态码为200的数据包 http.response.code==200","text":"Wireshark 过滤规则显示http状态码为200的数据包 http.response.code==200","categories":[],"tags":[{"name":"Use","slug":"Use","permalink":"http://yoursite.com/tags/Use/"},{"name":"Wireshark","slug":"Wireshark","permalink":"http://yoursite.com/tags/Wireshark/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-08-05T08:36:09.166Z","updated":"2016-08-08T08:35:00.523Z","comments":true,"path":"2016/08/05/hello-world/","link":"","permalink":"http://yoursite.com/2016/08/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}]}